worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
events {
  worker_connections  1024;
}
http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;
  log_format json_analytics escape=json '{'
  '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
  '"connection": "$connection", ' # connection serial number
  '"connection_requests": "$connection_requests", ' # number of requests made in connection
  '"pid": "$pid", ' # process pid
  '"request_id": "$request_id", ' # the unique request id
  '"request_length": "$request_length", ' # request length (including headers and body)
  '"remote_addr": "$remote_addr", ' # client IP
  '"remote_user": "$remote_user", ' # client HTTP username
  '"remote_port": "$remote_port", ' # client port
  '"time_local": "$time_local", '
  '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
  '"request": "$request", ' # full path no arguments if the request
  '"request_uri": "$request_uri", ' # full path and arguments if the request
  '"args": "$args", ' # args
  '"status": "$status", ' # response status code
  '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
  '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
  '"http_referer": "$http_referer", ' # HTTP referer
  '"http_user_agent": "$http_user_agent", ' # user agent
  '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
  '"http_host": "$http_host", ' # the request Host: header
  '"server_name": "$server_name", ' # the name of the vhost serving the request
  '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
  '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
  '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
  '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
  '"upstream_response_time": "$upstream_response_time", ' # time spent receiving upstream body
  '"upstream_response_length": "$upstream_response_length", ' # upstream response length
  '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
  '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
  '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
  '"scheme": "$scheme", ' # http or https
  '"request_method": "$request_method", ' # request method
  '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
  '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
  '"gzip_ratio": "$gzip_ratio"'
  '}';

  access_log /var/log/nginx/json_access.log json_analytics;
  sendfile        on;
  keepalive_timeout  65;

  gzip on;
  gzip_vary on;
  gzip_comp_level 3;
  gzip_min_length 256;
  gzip_types
    application/javascript
    application/x-javascript
    application/json
    image/svg+xml
    image/x-icon
    font/woff2
    text/css
    text/javascript
    text/plain;

  limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;
  limit_req zone=mylimit burst=10 delay=5;

  server {
      listen 80 default_server;
      listen [::]:80 default_server;
      server_name _;

      location /.well-known/acme-challenge {
        resolver 127.0.0.11 valid=30s;
        set $upstream letsencrypt;
        proxy_pass http://$upstream:80;
        proxy_set_header Host            $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto https;
      }

      location / {
          return 301 https://$host$request_uri;
      }
  }
  server {
    listen       443 ssl;
    http2 on;
    server_name jarm.online www.jarm.online;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_prefer_server_ciphers on;
    add_header   Strict-Transport-Security "max-age=63072000" always;
    ssl_certificate       /etc/letsencrypt/live/jarm.online/fullchain.pem;
    ssl_certificate_key   /etc/letsencrypt/live/jarm.online/privkey.pem;

    location ^~ /api/v1 {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://jarm_online_api:8000/;
    }

    location / {
      root   /app;
      index  index.html;
      try_files $uri $uri/ 404;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }

  # Netdata config
  upstream netdata {
    # Access the netdata running outside of docker
    server host.docker.internal:19999;
    keepalive 64;
  }

  server {
    listen       443 ssl;
    http2 on;

    # the virtual host name of this
    server_name netdata.jarm.online;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_prefer_server_ciphers on;
    add_header   Strict-Transport-Security "max-age=63072000" always;
    ssl_certificate       /etc/letsencrypt/live/jarm.online/fullchain.pem;
    ssl_certificate_key   /etc/letsencrypt/live/jarm.online/privkey.pem;

    location /.well-known/acme-challenge {
        resolver 127.0.0.11 valid=30s;
        set $upstream letsencrypt;
        proxy_pass http://$upstream:80;
        proxy_set_header Host            $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto https;
    }

    location / {
        limit_req zone=mylimit burst=25 delay=10;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://netdata;
        proxy_http_version 1.1;
        proxy_pass_request_headers on;
        proxy_set_header Connection "keep-alive";
        proxy_store off;
    }
  }
}
